(dp1
S'tcpconnect'
p2
ccopy_reg
_reconstructor
p3
(ctwisted.plugin
CachedDropin
p4
c__builtin__
object
p5
NtRp6
(dp7
S'moduleName'
p8
S'ooni.plugins.tcpconnect'
p9
sS'description'
p10
S'\nThis is a self genrated test created by scaffolding.py.\nyou will need to fill it up with all your necessities.\nSafe hacking :).\n'
p11
sS'plugins'
p12
(lp13
g3
(ctwisted.plugin
CachedPlugin
p14
g5
NtRp15
(dp16
S'provided'
p17
(lp18
ctwisted.plugin
IPlugin
p19
acooni.plugoo.interface
ITest
p20
asS'dropin'
p21
g6
sS'name'
p22
S'tcpconnect'
p23
sg10
NsbasbsS'domclass'
p24
g3
(g4
g5
NtRp25
(dp26
g8
S'ooni.plugins.domclass'
p27
sg10
Nsg12
(lp28
g3
(g14
g5
NtRp29
(dp30
g17
(lp31
g19
ag20
asg21
g25
sg22
S'domclass'
p32
sg10
NsbasbsS'bridget'
p33
g3
(g4
g5
NtRp34
(dp35
g8
S'ooni.plugins.bridget'
p36
sg10
Nsg12
(lp37
g3
(g14
g5
NtRp38
(dp39
g17
(lp40
g19
ag20
asg21
g34
sg22
S'bridget'
p41
sg10
S"\n    XXX fill me in\n\n    :ivar config:\n        An :class:`ooni.lib.txtorcon.TorConfig` instance.\n    :ivar relays:\n        A list of all provided relays to test.\n    :ivar bridges:\n        A list of all provided bridges to test.\n    :ivar socks_port:\n        Integer for Tor's SocksPort.\n    :ivar control_port:\n        Integer for Tor's ControlPort.\n    :ivar transport:\n        String defining the Tor's ClientTransportPlugin, for testing \n        a bridge's pluggable transport functionality.\n    :ivar tor_binary:\n        Path to the Tor binary to use, e.g. '/usr/sbin/tor'\n    "
p42
sbasbsS'daphn3'
p43
g3
(g4
g5
NtRp44
(dp45
g8
S'plugins.daphn3'
p46
sg10
S'\nThis is a self genrated test created by scaffolding.py.\nyou will need to fill it up with all your necessities.\nSafe hacking :).\n'
p47
sg12
(lp48
g3
(g14
g5
NtRp49
(dp50
g17
(lp51
g19
ag20
asg21
g44
sg22
S'daphn3test'
p52
sg10
NsbasbsS'httpt'
p53
g3
(g4
g5
NtRp54
(dp55
g8
S'ooni.plugins.httpt'
p56
sg10
S'\nThis is a self genrated test created by scaffolding.py.\nyou will need to fill it up with all your necessities.\nSafe hacking :).\n'
p57
sg12
(lp58
sbsS'chinatrigger'
p59
g3
(g4
g5
NtRp60
(dp61
g8
S'plugins.chinatrigger'
p62
sg10
Nsg12
(lp63
g3
(g14
g5
NtRp64
(dp65
g17
(lp66
g19
ag20
asg21
g60
sg22
S'chinatrigger'
p67
sg10
S'\n    This test is a OONI based implementation of the C tool written\n    by Philipp Winter to engage chinese probes in active scanning.\n\n    Example of running it:\n    ./ooni/ooniprobe.py chinatrigger -d 127.0.0.1 -p 8080 -f bla.pcap\n    '
p68
sbasbsS'dnstamper'
p69
g3
(g4
g5
NtRp70
(dp71
g8
S'ooni.plugins.dnstamper'
p72
sg10
S'\n    dnstamper\n    *********\n\n    This test resolves DNS for a list of domain names, one per line, in the\n    file specified in the ooni-config under the setting "dns_experiment". If\n    the file is top-1m.txt, the test will be run using Amazon\'s list of top\n    one million domains. The experimental dns servers to query should\n    be specified one per line in assets/dns_servers.txt.\n\n    The test reports censorship if the cardinality of the intersection of\n    the query result set from the control server and the query result set\n    from the experimental server is zero, which is to say, if the two sets\n    have no matching results whatsoever.\n\n    NOTE: This test frequently results in false positives due to GeoIP-based\n    load balancing on major global sites such as google, facebook, and\n    youtube, etc.\n\n    :author: Isis Lovecruft, Arturo Filast\xc3\xb2\n    :license: see LICENSE for more details\n\n    TODO:\n         * Finish porting to twisted\n         * Finish the client.Resolver() subclass and test it\n         * Use the DNS tests from captiveportal\n         * Use plugoo/reports.py for final data\n'
p73
sg12
(lp74
g3
(g14
g5
NtRp75
(dp76
g17
(lp77
g19
ag20
asg21
g70
sg22
S'dnstamper'
p78
sg10
S'\n    XXX fill me in\n    '
p79
sbasbsS'blocking'
p80
g3
(g4
g5
NtRp81
(dp82
g8
S'plugins.blocking'
p83
sg10
Nsg12
(lp84
g3
(g14
g5
NtRp85
(dp86
g17
(lp87
g19
ag20
asg21
g81
sg22
S'blocking'
p88
sg10
Nsbasbs.